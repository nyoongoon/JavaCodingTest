package _2_Java_Algo_Interview._6_해시테이블;

/**
 * 해시함수란 임의 크기 데이터를 고정크기 값으로 매핑하는데 사용할 수 있는 함수
 * 해시 테이블을 인덱싱하기 위해 해시 함수를 사용하는 것을 해싱이라고 함
 *
 * - 로드팩터
 * -> 해시테이블에 저장된 데이터 개수 n을 버킷의 개수 k로 나눈 것 -> n/k
 * -> 이 값은 해시 함수가 키들을 잘 분산해주는지 말하는 효율성 측면에도 사용되어
 * -> 기본 자바 로드 팩터는 0.75 -> 로드팩터가 증가할수록 해시테이블 성능 감소 -> 0.75넘어설 경우 해시 테이블 재할당함
 *
 * - 해시함수
 * -> 단순하면서도 널리쓰이는 정수형 해싱 기법인 모듈로 연산을 이용한 나눗셈 방식
 * -> h(x) = x mod m
 * -> h(x)는 입력값 x의 해시 함수를 통해 생성된 결과임
 * -> m은 해시 테이블의 크기로 일반으로 2의 멱수(거듭제곱으로된 수)에 가깝지 않은 소수를 택하는 것이 좋음
 * -> x는 어떤 간단한 규칙을 통해 만든 충분히 랜덤한 상태의 키 값
 *
 * - 해시 충돌
 * -> 개별 체이닝
 * --> 해시 테이블 기본 방식 -> 충돌 발생시 연결리스트로 연결
 * --> Java의 HashMap은 연결리스트 구조를 최적화하여, 데이터의 개수가 많아지면 레드블랙트리로 변환됨
 * -> 오픈 어드레싱
 * --> 충돌 발생 시 탐사를 통해 빈 공간을 찾아나서는 방식
 * --> 데이터가 뭉치는 경향
 * --> HashMap의 그로스팩터는 2로 로드팩터를 넘어서면 2배 더 큰 메모리 영역을 할당
 *
 *
 */
public class _0_해시테이블_이론 {

}
